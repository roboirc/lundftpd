#include <stdio.h>
#include <string.h>
#include <stdlib.h>


#include "lion.h"
#include "irc.h"
#include "announce.h"
#include "parser.h"



struct an_announce *an_announces = NULL;


// Add a new announcement to the global announces
struct an_announce *an_add(char *section, char *channel, char *name)
{

	struct an_announce *an;

	if (!(an = malloc(sizeof(*an)))) {
		perror("malloc");
		exit(-1);
	}
	bzero(an, sizeof(*an));

	an->section = strdup(section);
	an->name = strdup(name);

	an->channel = (channel) ? strdup(channel) : NULL;

	an->next = an_announces;
	an_announces = an;

	return an;

}

struct an_announce *an_find(char *section)
{

	struct an_announce *runner, *ret = NULL;

	for (runner = an_announces; runner; runner = runner->next) {

		if (!strcasecmp(runner->section, section))
			return runner;

		if (!ret && !strcasecmp(runner->section, "DEFAULT"))
			ret = runner;

	}

	// Will return DEFAULT announce structure if it exists.
	return ret;

}

struct an_event *an_add_event(char *section, char *type, char *format, char *name)
{

	struct an_announce *an;
	struct an_event *ev;

	if (!(an = an_find(section))) {
#ifdef DEBUG
		fprintf(stderr, "[an_add_event:%s:%d] Could not find section '%s'\n",
					__FILE__, __LINE__, section);
#endif
		return NULL;
	}

	if (!(ev = malloc(sizeof(*ev)))) {
		perror("malloc");
		exit(-1);
	}
	bzero(ev, sizeof(*ev));

	ev->type = strdup(type);
	ev->fmt = strdup(format);

	ev->next = an->events;
	an->events = ev;
	return ev;

}


struct an_event *an_find_event(char *section, char *type)
{

	struct an_announce *an;
	struct an_event *runner;

	if (!(an = an_find(section)))
		return NULL;

	for (runner = an->events; runner; runner = runner->next) {

		if (!strcasecmp(runner->type, type))
			return runner;

	}

	return NULL;

}



//
// search ONLY in the list for this channel.
//
// look for section first, then event, if either fail,
// look for default, then event.
//
struct an_event *an_find_event2(irc_channel_t *ic, char *section, char *type)
{

	struct an_announce *an;
	struct an_event *runner;
	int i;
	
	for (i = 0; i < ic->num_announce; i++) {

		an = (struct an_announce *)ic->announces[i];

		if (!strcasecmp(section, an->section)) {


			for (runner = an->events; 
				 runner; 
				 runner = runner->next) {
				
				if (!strcasecmp(runner->type, type))
					return runner;
				
			} // events
			
			return NULL; // Found section, but not event, fail. (don't loop)
		}
		
	}
	
	return NULL; // Not found section

}





// Default action for stuff from the bot, passed into by parser.c
char *an_format(char **keys, char **values, int items, irc_channel_t *ic)
{

	static char an_format[512];
	char field[32];
	struct an_event *ev;
	char *section, *type, *value, *p;
	int i, j;

	// Wipe out any old cruft.
	bzero(an_format, 512);
	bzero(field, 32);

	// Extract the section value or use DEFAULT
	section = parser_findkey(keys, values, items, "section");
	
	
	// Extract the event type value or return nothing
	if (!(type = parser_findkey(keys, values, items, "type")))
		return NULL;
	
	// Find the event within the section
	// look in the list of announces for the channel, try to match on
	// section, and if not, go for default.
	
	// Try to find based on "section" and if not, try DEFAULT
	if (!section || !(ev = an_find_event2(ic, section, type))) {

		if (!(ev = an_find_event2(ic, "DEFAULT", type))) {
			
			// Couldn't find a format...
			return NULL;
			
		}
	}

	// Build a string with the correct fields substituted
	for (p = ev->fmt, i = 0; *p; p++) {

		// Grab a string...
		if (*p == '%') {
			p++;

			// Just add a single % if there's %%
			if (*p == '%') {
				an_format[i++] = *p;
				an_format[i++] = *p;
				continue;
			}

			j=0;
			i+=2; // For the start/end %'s
			while (*p && *p != '%' && ((*p >= 65 && *p <= 90) || (*p >= 97 && *p <= 122)))
				field[j++] = *p++;
			field[j] = 0;
printf("DEBUG: found field %s\n", field);


			if ((value = parser_findkey(keys, values, items, field))) {
printf("DEBUG: found value %s\n", value);
				strncat(an_format, value, 512);
				i = strlen(an_format); // Reset i
			}

			// Add any spaces from the above while loop
			if (*p != '%' && ((*p < 65 || *p > 90) || (*p < 97 || *p > 122)))
				an_format[i++] = *p;

		} else {
		
			an_format[i++] = *p;

		}

	}

	return an_format;

}




void an_assigntochannel(irc_channel_t *ic)
{
	struct an_announce *runner;

	// For all announces
	for (runner = an_announces; runner; runner = runner->next) {

		// Check announce name vs channel's desired announce
		if (!strcasecmp(ic->announce, runner->name)) {

			// Add this announce to irc channel list.
			// Add another to the list.
			ic->announces = realloc(ic->announces, 
									ic->num_announce + 1);

			if (!ic->announces) {
				perror("malloc: ");
				exit(1);
			}

			ic->announces[ ic->num_announce ] = (void *)runner;
			ic->num_announce++;

			printf("[announce] connecting announce '%s' to channel '%s'\n",
				   runner->name, 
				   ic->name);

		}

	}

	if (!ic->num_announce) {

		printf("[announce] warning - channel '%s' has no announce sections.\n",
			   ic->name);

	} 


}

